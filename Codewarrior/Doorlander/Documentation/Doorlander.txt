=============================================================================
List of generated methods in project: Doorlander

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "LED_Red"   (component BitIO)
   - LED_Red_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LED_Red_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LED_Red_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LED_Red_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - LED_Red_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "LED_Green" (component BitIO)
   - LED_Green_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LED_Green_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LED_Green_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LED_Green_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - LED_Green_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "MCUC1"     (component McuLibConfig)
   - MCUC1_Init -Driver initialization method
   - MCUC1_Deinit -Driver deinitialization method

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section
   - CS1_Deinit -Driver de-initialization routine
   - CS1_Init -driver initialization routine

Module "PeriodicCounter" (component TimerInt)
   - PeriodicCounter_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).

Module "ACCEL1"    (component MMA7260Q)
   - ACCEL1_GetX -Retrieves the value for the X axis. The value is adjusted with the zero calibration value (0 for 0 g, 
                negative for negative acceleration and positive for positive acceleration).
   - ACCEL1_GetY -Retrieves the value for the Y axis. The value is adjusted with the zero calibration value (0 for 0 g, 
                negative for negative acceleration and positive for positive acceleration).
   - ACCEL1_GetZ -Retrieves the value for the Z axis. The value is adjusted with the zero calibration value (0 for 0 g, 
                negative for negative acceleration and positive for positive acceleration).
   - ACCEL1_Gselect -Allows to select different g sensitivity levels.
   - ACCEL1_SensorOn -Enables the sensor.
   - ACCEL1_SensorOff -Disables the sensor (puts it in sleep mode).
   - ACCEL1_CalibrateX1g -Performs a calibration of the sensor. It is assumed that the Y and Z sensors have 0 g, and the X 
                sensor has 1 g.
   - ACCEL1_CalibrateY1g -Performs a calibration of the sensor. It is assumed that the X and Z sensors have 0 g, and the Y 
                sensor has 1 g.
   - ACCEL1_CalibrateZ1g -Performs a calibration of the sensor. It is assumed that the X and Y sensors have 0 g, and the Z 
                sensor has 1 g.
   - ACCEL1_GetXmg -Returns the X value in mg
   - ACCEL1_GetYmg -Returns the Y value in mg
   - ACCEL1_GetZmg -Returns the Z value in mg
   - ACCEL1_MeasureGetRawX -Performs a measurement on X channel and returns the raw value.
   - ACCEL1_MeasureGetRawY -Performs a measurement on Y channel and returns the raw value.
   - ACCEL1_MeasureGetRawZ -Performs a measurement on Z channel and returns the raw value.
   - ACCEL1_GetXOffset -Returns the offset applied to the X value.
   - ACCEL1_GetYOffset -Returns the offset applied to the Y value.
   - ACCEL1_GetZOffset -Returns the offset applied to the Z value.
   - ACCEL1_GetX1gValue -Returns the value for 1g for channel  X.
   - ACCEL1_GetY1gValue -Returns the value for 1g for channel  Y.
   - ACCEL1_GetZ1gValue -Returns the value for 1g for channel  X.
   - ACCEL1_Deinit -Deinitializes the driver

Module "AD1"       (component ADC)
   - AD1_Enable -Enables A/D converter component. <Events> may be generated (<DisableEvent>/<EnableEvent>). If possible, this 
                method switches on A/D converter device, voltage reference, etc.
   - AD1_Disable -Disables A/D converter component. No <events> will be generated. If possible, this method switches off A/D 
                converter device, voltage reference, etc.
   - AD1_Start -This method starts continuous conversion on all channels that are set in the component inspector. When each 
                measurement on all channels has finished the <OnEnd > event may be invoked. This method is not available if the 
                <interrupt service> is disabled and the device doesn't support the continuous mode. Note: If time of 
                measurement is too short and the instruction clock is too slow then the conversion complete interrupt and its 
                handler may cause a system overflow.
   - AD1_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - AD1_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - AD1_GetChanValue -Returns the last measured value of the required channel. Format and width of the value is a native 
                format of the A/D converter.
   - AD1_GetChanValue8 -This method returns the last measured value of the required channel. Compared with <GetChanValue> 
                method this method returns more accurate result if the <number of conversions> is greater than 1 and <AD 
                resolution> is less than 8 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - AD1_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this method 
                returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is less than 
                16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - AD1_GetChanValue16 -This method returns the last measured value of the required channel. Compared with <GetChanValue> 
                method this method returns more accurate result if the <number of conversions> is greater than 1 and <AD 
                resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT1_Init -Driver initialization routine.
   - WAIT1_DeInit -Driver de-initialization routine

Module "MPR08x1"   (component MPR08x)
   - MPR08x1_SetSensitivity -Specifies the sensor sensitivity level at runtime. Do NOT call this function inside ProcessTouch().
   - MPR08x1_SetSounder -Configures the sounder/buzzer at runtime. Do NOT call this function inside ProcessTouch().
   - MPR08x1_GetSensorInformation -Reads the sensor information from the device. If the buffer is not large enough to get all 
                the information, then the next call to this function will return the remaining information. In any case the 
                buffer passed will be zero terminated.
   - MPR08x1_ProcessTouch -Reads the sensor data and dispatches it to the corresponding events. If the interrupts are enabled, 
                this method is called automatically in the interrupt service routine. Otherwise you have to call this function 
                from your application in order to read the sensor (instantaneous mode).

Module "CI2C1"     (component I2C)
   - CI2C1_Enable -Enables I2C component. Events may be generated ("DisableEvent"/"EnableEvent").
   - CI2C1_Disable -Disables I2C component. No events will be generated.
   - CI2C1_SendChar -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 0 to the I2C bus and then writes one character (byte) to the bus. The 
                slave address must be specified before, by the "SelectSlave" or "SelectSlave10" method or in the component 
                initialization section, "Target slave address init" property. If interrupt service is enabled and the method 
                returns ERR_OK, it doesn't mean that transmission was successful. The state of transmission is obtainable from 
                (OnTransmitData, OnError or OnArbitLost) events.   When working as a SLAVE, this method writes a character to 
                the internal output slave buffer and, after the master starts the communication, to the I2C bus. If no 
                character is ready for a transmission (internal output slave buffer is empty), the Empty character will be sent 
                (see "Empty character" property).
   - CI2C1_RecvChar -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 1 to the I2C bus, then reads one character (byte) from the bus and then 
                sends the stop condition. The slave address must be specified before, by the "SelectSlave" or "SelectSlave10" 
                method or in component initialization section, property "Target slave address init". If interrupt service is 
                enabled and the method returns ERR_OK, it doesn't mean that transmission was finished successfully. The state 
                of transmission must be tested by means of events (OnReceiveData, OnError or OnArbitLost). In case of 
                successful transmission, received data is ready after OnReceiveData event is called.   When working as a SLAVE, 
                this method reads a character from the input slave buffer.
   - CI2C1_SendBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The 
                slave address must be specified before, by the "SelectSlave" or "SlaveSelect10" method or in component 
                initialization section, "Target slave address init" property. If interrupt service is enabled and the method 
                returns ERR_OK, it doesn't mean that transmission was successful. The state of transmission is detectable by 
                means of events (OnTransmitData, OnError or OnArbitLost). Data to be send is not copied to an internal buffer 
                and remains in the original location. Therefore the content of the buffer should not be changed until the 
                transmission is complete. Event OnTransmitData can be used to detect the end of the transmission.  When working 
                as a SLAVE, this method writes a block of characters to the internal output slave buffer and then, after the 
                master starts the communication, to the I2C bus. If no character is ready for a transmission (internal output 
                slave buffer is empty), the "Empty character" will be sent (see "Empty character" property). In SLAVE mode the 
                data are copied to an internal buffer, if specified by "Output buffer size" property.
   - CI2C1_RecvBlock -When working as a MASTER, this method writes one (7-bit addressing) or two (10-bit addressing) slave 
                address bytes inclusive of R/W bit = 1 to the I2C bus, then reads the block of characters from the bus and then 
                sends the stop condition. The slave address must be specified before, by the "SelectSlave" or "SelectSlave10" 
                method or in component initialization section, "Target slave address init" property. If interrupt service is 
                enabled and the method returns ERR_OK, it doesn't mean that transmission was finished successfully. The state 
                of transmission must be tested by means of events (OnReceiveData, OnError or OnArbitLost). In case of 
                successful transmission, received data is ready after OnReceiveData event is called.   When working as a SLAVE, 
                this method reads a block of characters from the input slave buffer.
   - CI2C1_SelectSlave -This method selects a new slave for communication by its 7-bit slave address value. Any send or receive 
                method directs to or from selected device, until a new slave device is selected by this method. This method is 
                not available for the SLAVE mode.
   - CI2C1_CheckBus -This method returns the status of the bus. If the START condition has been detected, the method returns 
                'ComponentName'_BUSY. If the STOP condition has been detected, the method returns 'ComponentName'_IDLE.

Module "FT800_SPI" (component GenericSPI)
   - FT800_SPI_RecvChar -
   - FT800_SPI_SendChar -
   - FT800_SPI_ClearReceiveStatReg -Clears the status register
   - FT800_SPI_ClearReceiveDataReg -Clears the data register
   - FT800_SPI_WaitTransferDone -Waits until the transfer is done
   - FT800_SPI_WriteDummy_Read -Writes a dummy value to the SPI bus and returns the value read from the bus.
   - FT800_SPI_Write_ReadDummy -Writes a value to the SPI bus and ignores the value read back from the bus.

Module "FT800_nPowerDown" (component BitIO)
   - FT800_nPowerDown_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - FT800_nPowerDown_PutVal -The specified output value is set. If the direction is [input], the component saves the value to 
                a memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - FT800_nPowerDown_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - FT800_nPowerDown_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "FT800_nCS" (component BitIO)
   - FT800_nCS_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - FT800_nCS_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - FT800_nCS_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - FT800_nCS_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "Cpu"       (component MCF51JM128_64)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts
   - Cpu_SetWaitMode -Sets the low power mode - Wait mode.   For more information about the wait mode, see the documentation of 
                this CPU.   Release from the Wait mode: Reset or interrupt
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. The method is independent on selected speed mode.

===================================================================================
