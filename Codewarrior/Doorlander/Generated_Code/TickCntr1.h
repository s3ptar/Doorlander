/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : TickCntr1.h
**     Project     : Doorlander
**     Processor   : MCF51JM128VLH
**     Component   : FreeCntr
**     Version     : Component 01.118, Driver 01.13, CPU db: 3.00.063
**     Compiler    : CodeWarrior ColdFireV1 C Compiler
**     Date/Time   : 2018-07-08, 11:02, # CodeGen: 1
**     Abstract    :
**         This device "FreeCntr" implements a free running counter for
**         time measurement.
**     Settings    :
**         Timer name                  : RTC (8-bit)
**         Compare name                : RTCmod
**         Counter shared              : No
**
**         High speed mode
**             Prescaler               : divide-by-1
**             Clock                   : 16384 Hz
**           Period
**             Xtal ticks              : 120117
**             microseconds            : 10010
**             milliseconds            : 10
**             seconds (real)          : 0.010009765625
**             Hz                      : 100
**           Frequency of counting (Bus clock / prescaler)
**             Hz                      : 16384
**
**         Initialization:
**              Timer                  : Disabled
**
**         Timer registers
**              Counter                : RTCCNT    [0xFFFF806D]
**              Mode                   : RTCSC     [0xFFFF806C]
**              Run                    : RTCSC     [0xFFFF806C]
**              Prescaler              : RTCSC     [0xFFFF806C]
**              Compare                : RTCMOD    [0xFFFF806E]
**
**         Interrupt name              : Vrtc
**         Priority                    : 230
**         User handling procedure     : TickCntr1_OnInterrupt
**         This event is called when the counter is reinitialized
**     Contents    :
**         Enable          - byte TickCntr1_Enable(void);
**         Disable         - byte TickCntr1_Disable(void);
**         Reset           - byte TickCntr1_Reset(void);
**         GetCounterValue - byte TickCntr1_GetCounterValue(TickCntr1_TTimerValue *Value);
**         SetCompare      - void TickCntr1_SetCompare(TickCntr1_TTimerValue Value);
**
**Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**All Rights Reserved.
**
**Redistribution and use in source and binary forms, with or without modification,
**are permitted provided that the following conditions are met:
**
**o Redistributions of source code must retain the above copyright notice, this list
**  of conditions and the following disclaimer.
**
**o Redistributions in binary form must reproduce the above copyright notice, this
**  list of conditions and the following disclaimer in the documentation and/or
**  other materials provided with the distribution.
**
**o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**  contributors may be used to endorse or promote products derived from this
**  software without specific prior written permission.
**
**THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
**http: www.freescale.com
**mail: support@freescale.com
** ###################################################################*/
/*!
** @file TickCntr1.h
** @version 01.13
** @brief
**         This device "FreeCntr" implements a free running counter for
**         time measurement.
*/         
/*!
**  @addtogroup TickCntr1_module TickCntr1 module documentation
**  @{
*/         

#ifndef __TickCntr1
#define __TickCntr1

/* MODULE TickCntr1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited components */
#include "Cpu.h"

/* PUBLISHED CONSTANTS */
#define TickCntr1_COUNTER_INPUT_CLOCK_HZ 0x4000UL /* Initial counter input clock frequency [Hz] */
#define TickCntr1_PERIOD_VALUE        0xA4UL /* Initial period value in ticks of the timer */
#define TickCntr1_PRESCALER_VALUE           0x02U /* Prescaler value of the timer in high speed mode */
#define TickCntr1_TIMER_INPUT_CLOCK         0x8000UL /* Deprecated, Initial timer input clock value [Hz] */
#define TickCntr1_UP_COUNTER                1 /* The timer counts upwards */
#define TickCntr1_RESET_ON_COMPARE          1 /* Property "Reset on compare" selected */
/* High speed mode constants */
#define TickCntr1_COUNTER_INPUT_CLOCK_HZ_HIGH 0x4000UL /* Counter input clock frequency in high speed mode [Hz] */
#define TickCntr1_PERIOD_VALUE_HIGH   0xA4UL /* Period value in ticks of the timer in high speed mode */
#define TickCntr1_PRESCALER_VALUE_HIGH      0x02U /* Prescaler value of the timer in high speed mode */
#define TickCntr1_TIMER_INPUT_CLOCK_HIGH    0x8000UL /* Deprecated, Initial timer input clock value [Hz] */

typedef byte TickCntr1_TTimerValue;    /* Counter or compare value, width depends on timer width */

byte TickCntr1_Enable(void);
/*
** ===================================================================
**     Method      :  TickCntr1_Enable (component FreeCntr)
*/
/*!
**     @brief
**         This method enables the component, i.e. timer is enabled and
**         the internal clocks are counted. The method usually also
**         reset the counter (if it is supported by HW). 
**         The method is not available if the counter is shared.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
*/
/* ===================================================================*/

byte TickCntr1_Disable(void);
/*
** ===================================================================
**     Method      :  TickCntr1_Disable (component FreeCntr)
*/
/*!
**     @brief
**         This method disables the component, i.e. timer is disabled
**         and the internal clocks are stopped. Last counter value is
**         usually preserved in the counter (if it is supported by HW).
**         The method is not available if the counter is shared.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
*/
/* ===================================================================*/

#define TickCntr1_Reset() ( \
  RTCMOD = RTCMOD,                     /* Reset HW Counter */ \
  (byte)ERR_OK                         /* Return result */ \
)
/*
** ===================================================================
**     Method      :  TickCntr1_Reset (component FreeCntr)
*/
/*!
**     @brief
**         This method resets the timer-counter (sets to zero for
**         up-counting HW or to appropriate value for down-counting HW).
**         The method is available only if the counter register can be
**         set by software and the counter is not shared.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
*/
/* ===================================================================*/

#define TickCntr1_GetCounterValue(Value) ( \
  *(Value) = RTCCNT,                   /* Set the flag "events disabled" */ \
  (byte)ERR_OK                         /* Return result */ \
)
/*
** ===================================================================
**     Method      :  TickCntr1_GetCounterValue (component FreeCntr)
*/
/*!
**     @brief
**         This method returns a content of the counter.
**     @param
**         Value           - Pointer to returned value.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
*/
/* ===================================================================*/

#define TickCntr1_SetCompare(Value) (void)( \
  RTCMOD = (Value)                     /* Store given value to a compare register */ \
)
/*
** ===================================================================
**     Method      :  TickCntr1_SetCompare (component FreeCntr)
*/
/*!
**     @brief
**         This method sets the appropriate compare/modulo/reload
**         register. The method is available only when compare, modulo
**         or reload register is selected in the <Device> property. 
**         [Note:]This is low level method, value written using this
**         method is discarded when changing active speed-mode.
**     @param
**         Value           - This value is stored to compare
**                           register.
**                           
**                           [ Version specific information for HCS08
**                           and ColdFireV1 derivatives for peripheral
**                           TOD: ] 
**                           Only 6 higher bits of the parameter are
**                           valid and can be set to the match register
**                           (2 LSB bits are ignored). Please refer to
**                           datasheets for details.
*/
/* ===================================================================*/

void TickCntr1_Init(void);
/*
** ===================================================================
**     Method      :  TickCntr1_Init (component FreeCntr)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

__interrupt void TickCntr1_Interrupt(void);
/*
** ===================================================================
**     Method      :  TickCntr1_Interrupt (component FreeCntr)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


/* END TickCntr1. */

#endif /* ifndef __TickCntr1 */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale ColdFireV1 series of microcontrollers.
**
** ###################################################################
*/
